apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.pv_name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: fileservice
spec:
  storageClassName: uploads
  capacity:
    storage: "100Gi"
  accessModes:
  - ReadWriteMany
  nfs:
    server: {{ .Values.server.nfs.server }}
    path: {{ .Values.server.nfs.path }}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.pvc_name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: fileservice

spec:
  storageClassName: uploads  
  resources:
    requests:
      storage: "100Gi"
  accessModes:
  - ReadWriteMany

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Values.namespace }}
  name: fileservice
  labels:
    app: fileservice

spec:
  template:
    metadata:
      namespace: {{ .Values.namespace }}
      name: fileservice
      labels:
        app: fileservice
    spec:
      containers:
      - name: fileservice
        image: {{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        env:
        - name: APP_NAME
          value: fileservice
        - name: KAFKA_URL
          value:  "kafkasvc.classns.svc.cluster.local:9092"
        - name: VAULT_ADDR
          valueFrom:
            secretKeyRef:
              name: appsecret
              key: VAULT_ADDR
        - name: VAULT_ROLE_ID
          valueFrom:
            secretKeyRef:
              name: appsecret
              key: VAULT_ROLE_ID
        - name: VAULT_ROLE_SECRET
          valueFrom:
            secretKeyRef:
              name: appsecret
              key: VAULT_ROLE_SECRET
        - name: ENV
          value: "prod"
        resources:
          requests:
            memory: "{{ .Values.resources.requests.memory }}"
            cpu: "{{ .Values.resources.requests.cpu }}"
          limits:
            memory: "{{ .Values.resources.limits.memory }}"
            cpu: "{{ .Values.resources.limits.cpu }}"
        volumeMounts:
        - name: uploadvolume
          mountPath: /uploads
        ports:
        - name: flask-http
          containerPort: 5000
      initContainers:
      - name: init-service
        image: docker.laniakea.local:8080/backend/tools:latest
        env:
        - name: APP_NAME
          value: fileservice
        - name: VAULT_ADDR
          valueFrom:
            secretKeyRef:
              name: appsecret
              key: VAULT_ADDR
        - name: VAULT_ROLE_ID
          valueFrom:
            secretKeyRef:
              name: appsecret
              key: VAULT_ROLE_ID
        - name: VAULT_ROLE_SECRET
          valueFrom:
            secretKeyRef:
              name: appsecret
              key: VAULT_ROLE_SECRET
        command: ["python", "./initcontainer.py"]
      imagePullSecrets:
      - name: regsecret
      volumes:
      - name: uploadvolume
        persistentVolumeClaim:
          claimName: {{ .Values.pvc_name }}
      nodeSelector:
        application: upclass
  replicas: 1
  selector:
    matchLabels:
      app: fileservice
